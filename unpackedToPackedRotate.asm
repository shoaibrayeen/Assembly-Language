; THIS ASSEMBLY CODE CONVERTS UNPACKED BCD NUMBER TO PACKED BCD NUMBER USING ROTATE INSTRUCTION.

DATA SEGMENT				; A SEGMENT NAMED AS DATA	
	
    PACKED      DB  8 DUP(?)		; PACKED ARRAY OF SIZE 8 TO STORE 16 DIGITS PACKED BCD
    UNPACKED    DB  08H,07H,06H,05H,04H,03H,02H,01H,09H,02H,03H,04H,05H,06H,07H,08H
    ; INTIALIZING UNPACKED ARRAY WIH 16 DIFFERENT NUMBERS
	 
DATA ENDS				; END OF DATA SEGMENT

CODE SEGMENT				; A SEGMENT NAMED AS CODE

    ASSUME  DS:DATA , CS:CODE
    ; INFORM TO ASSEMBLER THAT DATA SEGMENT IS ASSOCIATED WITH DS AND CODE SEGMENT IS ASSOCIATED WITH CS
    
    START:				; MAIN OF THE PROGRAM
	   MOV AX , DATA
           MOV DS , AX			; LOADS DS WITH THE ADDRESS OF DATA SEGMENT
            
           MOV CX , 08H			; CX IS INTIALIZED WITH 8 TO EXECUTE LOOP 8 TIMES
           MOV SI , 0H 			; CLEARING SI
           MOV DI , 0H 			; CLEARING DI
	   MOV AX , 0H			; CLEARING AX

    NEXT:
           MOV AH , UNPACKED[SI]	; MOVE THE CONTENT OF UNPACKED ARRAY TO AH REGISTER
           INC SI               	; SI IS INCREMENTED BY 1.          
           MOV AL , UNPACKED[SI]	; MOVE THE CONTENT OF UNPACKED ARRAY TO AL REGISTER
           INC SI			; SI IS INCREMENTED BY 1.

           ROL AL , 4			; ROTATE LEFT AL REGISTER BY 4 \BIT.
           ROR AX , 4			; ROTATE RIGHT AX REGISTER BY 4 BIT.

           MOV PACKED[DI] , AL  	; MOVE THE CONTENT OF AL REGISTER TO PACKED ARRAY
           INC DI			; DI IS INCREMENTED BY 1.

           LOOP NEXT			; REPEAT UNTIL CX != 0H

CODE ENDS  				; END OF CODE SEGMENT
    END START				; END OF THE PROGRAM
